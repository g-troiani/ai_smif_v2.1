# Module: components/ui_module

# File: components/ui_module/__init__.py
# Type: py



# File: components/ui_module/app.py
# Type: py

# components/ui_module/app.py
from flask import Flask
from flask_bootstrap import Bootstrap
from flask_socketio import SocketIO

app = Flask(__name__)
app.config.from_object('config')
Bootstrap(app)
socketio = SocketIO(app)

from routes import *

if __name__ == '__main__':
    socketio.run(app, debug=True)


# File: components/ui_module/config.py
# Type: py

# components/ui_module/config.py
import os
from secrets import token_hex

SECRET_KEY = os.environ.get('SECRET_KEY') or token_hex(16)
DEBUG = True  # For development only

# File: components/ui_module/forms.py
# Type: py

# components/ui_module/forms.py
from flask_wtf import FlaskForm
from wtforms import StringField, SubmitField, SelectField, IntegerField, FileField
from wtforms.validators import DataRequired, NumberRange
from wtforms import DateField

class TickerForm(FlaskForm):
    ticker = StringField('Ticker Symbol', validators=[DataRequired()])
    submit = SubmitField('Add Ticker')

class StrategyForm(FlaskForm):
    strategy = SelectField('Strategy', choices=[
        ('ma_crossover', 'Moving Average Crossover'),
        ('rsi', 'RSI Strategy')
    ], validators=[DataRequired()])
    param1 = IntegerField('Parameter 1', validators=[DataRequired(), NumberRange(min=1)])
    param2 = IntegerField('Parameter 2', validators=[DataRequired(), NumberRange(min=1)])
    submit = SubmitField('Configure Strategy')

class BacktestForm(FlaskForm):
    start_date = DateField('Start Date', validators=[DataRequired()])
    end_date = DateField('End Date', validators=[DataRequired()])
    submit = SubmitField('Run Backtest')

class DataConfigForm(FlaskForm):
    data_interval = SelectField('Data Interval', 
        choices=[('5min', '5 Minutes'), ('15min', '15 Minutes'), ('1h', '1 Hour')],
        default='5min',
        validators=[DataRequired()]
    )
    lookback_period = SelectField('Historical Data Period',
        choices=[('1y', '1 Year'), ('3y', '3 Years'), ('5y', '5 Years')],
        default='5y',
        validators=[DataRequired()]
    )
    submit = SubmitField('Update Data Configuration')
    
class DataSettingsForm(FlaskForm):
    historical_period = SelectField('Historical Data Period', 
        choices=[('5y', '5 Years')],  # Fixed to 5 years per requirements
        default='5y',
        validators=[DataRequired()]
    )
    data_interval = SelectField('Data Interval',
        choices=[('5min', '5 Minutes')],  # Fixed to 5 minutes per requirements
        default='5min',
        validators=[DataRequired()]
    )
    tickers_file = FileField('Upload Tickers CSV')
    submit = SubmitField('Update Data Settings')


# File: components/ui_module/routes.py
# Type: py

# components/ui_module/routes.py

from flask import render_template, redirect, url_for, jsonify, request, flash
from app import app
from forms import TickerForm, StrategyForm, BacktestForm, DataConfigForm, DataSettingsForm
from socketio_events import send_alert
from flask import send_file
import sqlite3
from datetime import datetime

# Import backtesting components
from components.backtesting_module.backtester import Backtester
from components.backtesting_module.optimizer import Optimizer
from components.backtesting_module.parameter_validator import ParameterValidator
from components.backtesting_module.formatters import ResultFormatter
from components.backtesting_module.results_viewer import ResultsViewer

from flask import request, jsonify
from components.ui_module import app
from components.trading_execution_engine.execution_engine import ExecutionEngine
from components.trading_execution_engine.trade_signal import TradeSignal
from datetime import datetime

execution_engine = ExecutionEngine()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/strategy', methods=['GET', 'POST'])
def strategy():
    form = StrategyForm()
    if form.validate_on_submit():
        # Process strategy configuration
        return redirect(url_for('dashboard'))
    return render_template('strategy.html', form=form)

@app.route('/dashboard')
def dashboard():
    return render_template('dashboard.html')

@app.route('/api/add_ticker', methods=['POST'])
def api_add_ticker():
    data = request.get_json()
    ticker = data.get('ticker')
    if not ticker:
        return jsonify({'status': 'error', 'message': 'No ticker provided'}), 400
    # Process ticker addition
    return jsonify({'status': 'success'})

@app.route('/api/manual_trade', methods=['POST'])
def manual_trade():
    data = request.json
    try:
        ticker = data['ticker'].upper()
        quantity = float(data['quantity'])
        side = data['side'].upper()
        if side not in ('BUY', 'SELL'):
            return jsonify({'error': 'Invalid side. Must be BUY or SELL.'}), 400

        trade_signal = TradeSignal(
            ticker=ticker,
            signal_type=side,
            quantity=quantity,
            strategy_id='manual_trade',
            timestamp=datetime.utcnow(),
            price=None
        )
        execution_engine.add_trade_signal(trade_signal)
        return jsonify({'message': 'Trade signal received and being processed.'}), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 400
    

@app.route('/api/liquidate_positions', methods=['POST'])
def liquidate_positions():
    # Handle emergency liquidation
    return jsonify({'message': 'All positions liquidated'})

@app.route('/backtest', methods=['GET', 'POST'])
def backtest():
    form = BacktestForm()
    if form.validate_on_submit():
        try:
            # Extract form data
            strategy_name = form.strategy.data
            ticker = form.ticker.data.upper()
            start_date = form.start_date.data
            end_date = form.end_date.data
            strategy_params = {
                'short_window': form.short_window.data,
                'long_window': form.long_window.data
            }
            optimize = form.optimize.data

            # Validate parameters
            try:
                ParameterValidator.validate_parameters(strategy_name, strategy_params)
            except ValueError as e:
                flash(f"Invalid parameters: {str(e)}", 'danger')
                return redirect(url_for('backtest'))

            # Run backtest
            backtester = Backtester(strategy_name, strategy_params, ticker, start_date, end_date)
            
            if optimize:
                optimizer = Optimizer(strategy_name, ticker, start_date, end_date)
                param_ranges = ParameterValidator.generate_grid_parameters(strategy_name)
                results = optimizer.run_optimization(param_ranges)
                best_params = optimizer.get_best_params(results)
                strategy_params.update(best_params)
                backtester.strategy_params = strategy_params
            
            backtester.run_backtest()
            backtester.save_results()
            
            # Format results
            metrics = backtester.get_performance_metrics()
            formatted_metrics = ResultFormatter.format_metrics(metrics)
            comparison = backtester.compare_with_benchmark()
            formatted_comparison = {
                'strategy': ResultFormatter.format_metrics(comparison['Strategy']),
                'benchmark': ResultFormatter.format_metrics(comparison['Benchmark'])
            }
            
            return render_template(
                'backtest_results.html',
                metrics=formatted_metrics,
                comparison=formatted_comparison,
                strategy_name=strategy_name,
                ticker=ticker
            )
            
        except Exception as e:
            flash(f"Error during backtesting: {str(e)}", 'danger')
            return redirect(url_for('backtest'))
            
    return render_template('backtest.html', form=form)

@app.route('/api/backtest/results', methods=['GET'])
def get_backtest_results():
    try:
        viewer = ResultsViewer()
        results = viewer.get_results()
        formatted_results = ResultFormatter.format_metrics(results.to_dict('records'))
        return jsonify({
            'success': True,
            'results': formatted_results
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.errorhandler(404)
def not_found_error(error):
    return render_template('404.html'), 404

@app.errorhandler(500)
def internal_error(error):
    return render_template('500.html'), 500

@app.route('/data_management', methods=['GET', 'POST'])
def data_management():
    form = DataConfigForm()
    if form.validate_on_submit():
        # Process data configuration
        return redirect(url_for('dashboard'))
    return render_template('data_management.html', form=form)

@app.route('/api/load_historical_data', methods=['POST'])
def load_historical_data():
    try:
        data = request.get_json()
        tickers = data.get('tickers', [])
        interval = data.get('interval', '5min')
        period = data.get('period', '5y')
        # Process historical data request
        return jsonify({'status': 'success'})
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)}), 400

@app.route('/api/upload_tickers', methods=['POST'])
def upload_tickers():
    if 'file' not in request.files:
        return jsonify({'status': 'error', 'message': 'No file uploaded'}), 400
    try:
        file = request.files['file']
        if file.filename == '':
            return jsonify({'status': 'error', 'message': 'No file selected'}), 400
        if file and file.filename.endswith('.csv'):
            # Process ticker list CSV
            return jsonify({'status': 'success'})
        return jsonify({'status': 'error', 'message': 'Invalid file format'}), 400
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)}), 400

@app.route('/data_settings', methods=['GET', 'POST'])
def data_settings():
    form = DataSettingsForm()
    if form.validate_on_submit():
        if form.tickers_file.data:
            # Process tickers CSV file
            file = form.tickers_file.data
            process_tickers_file(file)
        return redirect(url_for('data_settings'))
    
    # Get current data status
    conn = sqlite3.connect('data/data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM historical_data")
    data_count = cursor.fetchone()[0]
    cursor.execute("SELECT MAX(timestamp) FROM historical_data")
    last_update = cursor.fetchone()[0]
    conn.close()
    
    return render_template('data_settings.html', 
                         form=form, 
                         data_count=data_count,
                         last_update=last_update)

@app.route('/api/data_status')
def get_data_status():
    conn = sqlite3.connect('data/data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT MAX(timestamp) FROM historical_data")
    last_update = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT(DISTINCT ticker_symbol) FROM historical_data")
    ticker_count = cursor.fetchone()[0]
    conn.close()
    
    return jsonify({
        'last_update': last_update,
        'ticker_count': ticker_count,
        'interval': '5min',
        'period': '5y'
    })

# File: components/ui_module/socketio_events.py
# Type: py

# components/ui_module/socketio_events.py
from app import socketio
from datetime import datetime

@socketio.on('connect')
def handle_connect():
    print('Client connected')

@socketio.on('disconnect')
def handle_disconnect():
    print('Client disconnected')

def send_update(data):
    socketio.emit('update', data)

def send_alert(message):
    socketio.emit('alert', {'message': message})

def send_data_status(status, last_update):
    socketio.emit('data_status', {
        'status': status,
        'last_update': last_update
    })
    
def send_data_update(status):
    socketio.emit('data_update', {
        'status': status,
        'timestamp': datetime.now().isoformat()
    })

# File: components/ui_module/static/js/main.js
# Type: js

// Initialize WebSocket connection
const socket = io();

// WebSocket event handlers
socket.on('connect', () => {
    console.log('Connected to server');
    updateUIElements(); // Update UI elements on connection
});

socket.on('update', (data) => {
    // Update account balance
    if (data.balance) {
        const balanceElement = document.getElementById('account-balance');
        if (balanceElement) {
            balanceElement.textContent = `$${data.balance.toFixed(2)}`;
        }
    }
    
    // Update strategy performance
    if (data.performance) {
        const performanceElement = document.getElementById('strategy-performance');
        if (performanceElement) {
            performanceElement.textContent = `${data.performance.toFixed(2)}%`;
        }
    }

    // Update portfolio value
    if (data.portfolio_value) {
        const portfolioElement = document.getElementById('portfolio-value');
        if (portfolioElement) {
            portfolioElement.textContent = `$${data.portfolio_value.toFixed(2)}`;
        }
    }

    // Update strategy status
    if (data.strategy_status) {
        const statusElement = document.getElementById('strategy-status');
        if (statusElement) {
            statusElement.textContent = data.strategy_status;
            statusElement.className = `badge ${data.strategy_status === 'Active' ? 'badge-success' : 'badge-secondary'}`;
        }
    }
    
    // Update positions table
    if (data.positions) {
        updatePositionsTable(data.positions);
    }

    // Update open orders
    if (data.orders) {
        updateOrdersTable(data.orders);
    }
});

// Handle server alerts
socket.on('alert', (data) => {
    if (data.message) {
        alert(data.message);
    }
});

// Handle data stream status updates
socket.on('data_status', (data) => {
    const streamStatus = document.getElementById('stream-status');
    const lastUpdate = document.getElementById('last-update');
    
    if (streamStatus && data.status) {
        streamStatus.textContent = data.status;
        streamStatus.className = `badge badge-${data.status === 'Active' ? 'success' : 'secondary'}`;
    }
    
    if (lastUpdate && data.last_update) {
        lastUpdate.textContent = new Date(data.last_update).toLocaleString();
    }
});

// Setup DOM event listeners
document.addEventListener('DOMContentLoaded', () => {
    initializeUIElements();

    // Ticker form handling
    const tickerForm = document.getElementById('add-ticker-form');
    if (tickerForm) {
        tickerForm.addEventListener('submit', (event) => {
            event.preventDefault();
            const ticker = document.getElementById('ticker-input').value.trim().toUpperCase();
            if (!ticker) {
                alert('Please enter a valid ticker symbol');
                return;
            }

            fetch('/api/add_ticker', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ ticker })
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    alert('Ticker added successfully');
                    tickerForm.reset();
                    updateUIElements(); // Refresh UI after adding ticker
                } else {
                    alert(data.message || 'Error adding ticker');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error adding ticker');
            });
        });
    }

    // Ticker file upload handling
    const tickerUploadForm = document.getElementById('ticker-upload-form');
    if (tickerUploadForm) {
        tickerUploadForm.addEventListener('submit', (event) => {
            event.preventDefault();
            const fileInput = document.getElementById('ticker-file');
            const file = fileInput.files[0];
            if (!file) {
                alert('Please select a file to upload');
                return;
            }

            const formData = new FormData();
            formData.append('file', file);

            fetch('/api/upload_tickers', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    alert('Ticker list uploaded successfully');
                    tickerUploadForm.reset();
                    updateUIElements();
                } else {
                    alert(data.message || 'Error uploading ticker list');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error uploading ticker list');
            });
        });
    }

    // Data configuration form handling
    const dataConfigForm = document.getElementById('data-config-form');
    if (dataConfigForm) {
        dataConfigForm.addEventListener('submit', (event) => {
            event.preventDefault();
            
            const formData = new FormData(dataConfigForm);
            const interval = formData.get('data_interval');
            const period = formData.get('lookback_period');

            fetch('/api/load_historical_data', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ interval, period })
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    alert('Data configuration updated successfully');
                    updateUIElements();
                } else {
                    alert(data.message || 'Error updating data configuration');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error updating data configuration');
            });
        });
    }

    // Strategy configuration form validation
    const strategyForm = document.getElementById('strategy-config-form');
    if (strategyForm) {
        strategyForm.addEventListener('submit', (event) => {
            event.preventDefault();
            const ticker = document.getElementById('ticker').value.trim();
            if (!ticker) {
                alert('Please enter a valid ticker symbol');
                return;
            }
            strategyForm.submit();
        });
    }

    // Backtest configuration form validation
    const backtestForm = document.getElementById('backtest-config-form');
    if (backtestForm) {
        backtestForm.addEventListener('submit', (event) => {
            event.preventDefault();
            const startDate = document.getElementById('start-date').value;
            const endDate = document.getElementById('end-date').value;
            
            if (!startDate || !endDate) {
                alert('Please select both start and end dates');
                return;
            }
            if (new Date(startDate) >= new Date(endDate)) {
                alert('Start date must be before end date');
                return;
            }
            backtestForm.submit();
        });
    }

    // Manual buy button handling
    const buyButton = document.getElementById('buy-button');
    if (buyButton) {
        buyButton.addEventListener('click', () => {
            if (confirm('Are you sure you want to execute a Buy order?')) {
                fetch('/api/manual_trade', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ action: 'buy' })
                })
                .then(response => response.json())
                .then(data => {
                    alert(data.message || 'Trade executed successfully');
                    updateUIElements();
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error executing trade');
                });
            }
        });
    }

    // Manual sell button handling
    const sellButton = document.getElementById('sell-button');
    if (sellButton) {
        sellButton.addEventListener('click', () => {
            if (confirm('Are you sure you want to execute a Sell order?')) {
                fetch('/api/manual_trade', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ action: 'sell' })
                })
                .then(response => response.json())
                .then(data => {
                    alert(data.message || 'Trade executed successfully');
                    updateUIElements();
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error executing trade');
                });
            }
        });
    }

    // Panic button handling
    const panicButton = document.getElementById('panic-button');
    if (panicButton) {
        panicButton.addEventListener('click', () => {
            if (confirm('This will liquidate all positions. Proceed?')) {
                fetch('/api/liquidate_positions', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                })
                .then(response => response.json())
                .then(data => {
                    alert(data.message || 'Positions liquidated successfully');
                    updateUIElements();
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error liquidating positions');
                });
            }
        });
    }

    // Initialize refresh button
    initializeRefreshButton();
});

// Helper function to update positions table
function updatePositionsTable(positions) {
    const tableBody = document.getElementById('positions-table-body');
    if (!tableBody) return;

    tableBody.innerHTML = '';
    positions.forEach(position => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${position.ticker}</td>
            <td>${position.quantity}</td>
            <td>$${position.price.toFixed(2)}</td>
            <td>${position.pnl ? position.pnl.toFixed(2) + '%' : 'N/A'}</td>
        `;
        tableBody.appendChild(row);
    });
}

// Helper function to update orders table
function updateOrdersTable(orders) {
    const tableBody = document.getElementById('orders-table-body');
    if (!tableBody) return;

    tableBody.innerHTML = '';
    orders.forEach(order => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${order.ticker}</td>
            <td>${order.type}</td>
            <td>${order.quantity}</td>
            <td>$${order.price.toFixed(2)}</td>
            <td>${order.status}</td>
        `;
        tableBody.appendChild(row);
    });
}

// Initialize UI elements
function initializeUIElements() {
    // Account summary section
    const accountSummary = document.getElementById('account-summary');
    if (accountSummary) {
        accountSummary.innerHTML = `
            <div class="card mb-4">
                <div class="card-header">Account Summary</div>
                <div class="card-body">
                    <p>Balance: <span id="account-balance">$0.00</span></p>
                    <p>Portfolio Value: <span id="portfolio-value">$0.00</span></p>
                    <p>Performance: <span id="strategy-performance">0.00%</span></p>
                    <p>Strategy Status: <span id="strategy-status" class="badge badge-secondary">Inactive</span></p>
                </div>
            </div>
        `;
    }

    // Data status section
    const dataStatus = document.getElementById('data-status');
    if (dataStatus) {
        dataStatus.innerHTML = `
            <div class="card mb-4">
                <div class="card-header">Data Stream Status</div>
                <div class="card-body">
                    <p>Status: <span id="stream-status" class="badge badge-secondary">Inactive</span></p>
                    <p>Last Update: <span id="last-update">Never</span></p>
                </div>
            </div>
        `;
    }

    // Fetch initial data
    updateUIElements();
}

// Initialize refresh button
function initializeRefreshButton() {
    const refreshButton = document.getElementById('refresh-button');
    if (refreshButton) {
        refreshButton.addEventListener('click', () => {
            updateUIElements();
        });
    }
}

// Update UI elements with latest data
function updateUIElements() {
    fetch('/api/account/status')
        .then(response => response.json())
        .then(data => {
            if (data.balance) {
                document.getElementById('account-balance').textContent = `$${data.balance.toFixed(2)}`;
            }
            if (data.portfolio_value) {
                document.getElementById('portfolio-value').textContent = `$${data.portfolio_value.toFixed(2)}`;
            }
            if (data.performance) {
                document.getElementById('strategy-performance').textContent = `${data.performance.toFixed(2)}%`;
            }
            if (data.positions) {
                updatePositionsTable(data.positions);
            }
            if (data.orders) {
                updateOrdersTable(data.orders);
            }
        })
        .catch(error => {
            console.error('Error updating UI:', error);
        });
    // Update data status
    fetch('/api/data_status')
        .then(response => response.json())
        .then(data => {
            const lastUpdate = document.getElementById('last-update');
            if (lastUpdate && data.last_update) {
                lastUpdate.textContent = new Date(data.last_update).toLocaleString();
            }
        })
        .catch(error => {
            console.error('Error updating data status:', error);
        });
}


// Add to existing main.js file
socket.on('data_update', (data) => {
    const streamStatus = document.getElementById('stream-status');
    const lastUpdate = document.getElementById('last-update');
    
    if (streamStatus) {
        streamStatus.textContent = data.status;
        streamStatus.className = `badge badge-${data.status === 'Active' ? 'success' : 'secondary'}`;
    }
    
    if (lastUpdate && data.timestamp) {
        lastUpdate.textContent = new Date(data.timestamp).toLocaleString();
    }
});


# File: components/ui_module/static/css/styles.css
# Type: css

/* components/ui_module/static/css/styles.css */
.mt-4 {
    margin-top: 1.5rem;
}

.mb-4 {
    margin-bottom: 1.5rem;
}

.gap-2 {
    gap: 0.5rem;
}

# File: components/ui_module/templates/404.html
# Type: html

<!-- components/ui_module/templates/404.html -->
{% extends "base.html" %}

{% block title %}Page Not Found{% endblock %}

{% block page_content %}
<div class="text-center">
    <h1>Page Not Found</h1>
    <p>The requested page was not found on the server.</p>
    <p><a href="{{ url_for('index') }}" class="btn btn-primary">Back to Home</a></p>
</div>
{% endblock %}

# File: components/ui_module/templates/500.html
# Type: html

<!-- components/ui_module/templates/500.html -->
{% extends "base.html" %}

{% block title %}Server Error{% endblock %}

{% block page_content %}
<div class="text-center">
    <h1>An unexpected error has occurred</h1>
    <p>The server encountered an internal error. Please try again later.</p>
    <p><a href="{{ url_for('index') }}" class="btn btn-primary">Back to Home</a></p>
</div>
{% endblock %}

# File: components/ui_module/templates/backtest.html
# Type: html

{# components/ui_module/templates/backtest.html #}
{% extends "base.html" %}
{% import "bootstrap/wtf.html" as wtf %}

{% block content %}
<div class="container">
    <h2>Configure Backtest</h2>
    {{ wtf.quick_form(form) }}
</div>
{% endblock %}

# File: components/ui_module/templates/base.html
# Type: html

<!-- components/ui_module/templates/base.html -->
{% extends 'bootstrap/base.html' %}

{% block title %}Trading App{% endblock %}

{% block styles %}
{{super()}}
<link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
{% endblock %}

{% block content %}
<nav class="navbar navbar-expand-lg navbar-dark bg-dark mb-4">
    <div class="container">
        <a class="navbar-brand" href="{{ url_for('index') }}">Trading App</a>
        <div class="navbar-nav">
            <a class="nav-item nav-link" href="{{ url_for('dashboard') }}">Dashboard</a>
            <a class="nav-item nav-link" href="{{ url_for('strategy') }}">Strategy</a>
        </div>
    </div>
</nav>

<div class="container">
    {% block page_content %}{% endblock %}
</div>
{% endblock %}

{% block scripts %}
{{super()}}
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
<script src="{{ url_for('static', filename='js/main.js') }}"></script>
{% endblock %}

# File: components/ui_module/templates/dashboard.html
# Type: html

<!-- components/ui_module/templates/dashboard.html -->
{% extends "base.html" %}

{% block title %}Dashboard{% endblock %}

{% block page_content %}
<div id="account-summary"></div>
<div id="trading-controls"></div>
<div id="strategy-controls"></div>

<div class="card mb-4">
    <div class="card-header">Positions</div>
    <div class="card-body">
        <table class="table" id="positions-table">
            <thead>
                <tr>
                    <th>Symbol</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th>P/L</th>
                </tr>
            </thead>
            <tbody id="positions-table-body"></tbody>
        </table>
    </div>
</div>

<div class="card">
    <div class="card-header">Open Orders</div>
    <div class="card-body">
        <table class="table" id="orders-table">
            <thead>
                <tr>
                    <th>Symbol</th>
                    <th>Type</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody id="orders-table-body"></tbody>
        </table>
    </div>
</div>
{% endblock %}

# File: components/ui_module/templates/data_management.html
# Type: html

<!-- components/ui_module/templates/data_management.html -->
{% extends "base.html" %}
{% import "bootstrap/wtf.html" as wtf %}

{% block title %}Data Management{% endblock %}

{% block page_content %}
<div class="row">
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-header">Data Configuration</div>
            <div class="card-body">
                {{ wtf.quick_form(form) }}
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-header">Upload Ticker List</div>
            <div class="card-body">
                <form id="ticker-upload-form" enctype="multipart/form-data">
                    <div class="form-group">
                        <label for="ticker-file">Upload CSV File</label>
                        <input type="file" class="form-control-file" id="ticker-file" accept=".csv" required>
                    </div>
                    <button type="submit" class="btn btn-primary">Upload</button>
                </form>
            </div>
        </div>
        <div class="card">
            <div class="card-header">Data Status</div>
            <div class="card-body">
                <p>Last Update: <span id="last-update">Never</span></p>
                <p>Data Stream Status: <span id="stream-status" class="badge badge-secondary">Inactive</span></p>
            </div>
        </div>
    </div>
</div>
{% endblock %}

# File: components/ui_module/templates/data_settings.html
# Type: html

<!-- components/ui_module/templates/data_settings.html -->
{% extends "base.html" %}
{% import "bootstrap/wtf.html" as wtf %}

{% block title %}Data Settings{% endblock %}

{% block page_content %}
<div class="container">
    <div class="row">
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header">Data Configuration</div>
                <div class="card-body">
                    {{ wtf.quick_form(form) }}
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header">Data Status</div>
                <div class="card-body">
                    <p>Data Interval: 5 Minutes</p>
                    <p>Historical Period: 5 Years</p>
                    <p>Last Update: <span id="last-update">{{ last_update or 'Never' }}</span></p>
                    <p>Records in Database: {{ data_count }}</p>
                    <p>Data Stream Status: <span id="stream-status" class="badge badge-secondary">Inactive</span></p>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

# File: components/ui_module/templates/index.html
# Type: html

<!-- components/ui_module/templates/index.html -->
{% extends "base.html" %}

{% block title %}Home{% endblock %}

{% block page_content %}
<div class="row">
    <div class="col-md-8 offset-md-2">
        <h1 class="text-center mb-4">Welcome to the Trading App</h1>
        <form id="add-ticker-form" class="mb-4">
            <div class="form-group">
                <label for="ticker-input">Add Ticker</label>
                <input type="text" class="form-control" id="ticker-input" required>
            </div>
            <button type="submit" class="btn btn-primary">Add</button>
        </form>
        <div class="text-center">
            <a href="{{ url_for('strategy') }}" class="btn btn-primary">Configure Strategy</a>
        </div>
    </div>
</div>
{% endblock %}

# File: components/ui_module/templates/strategy.html
# Type: html

<!-- components/ui_module/templates/strategy.html -->
{% extends "base.html" %}
{% import "bootstrap/wtf.html" as wtf %}

{% block title %}Configure Strategy{% endblock %}

{% block page_content %}
<div class="row">
    <div class="col-md-8 offset-md-2">
        <h2 class="mb-4">Configure Strategy</h2>
        {{ wtf.quick_form(form) }}
    </div>
</div>
{% endblock %}

