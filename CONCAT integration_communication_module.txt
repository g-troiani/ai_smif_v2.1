# Module: components/integration_communication_module

# File: components/integration_communication_module/__init__.py
# Type: py



# File: components/integration_communication_module/config.py
# Type: py

# components/integration_communication_module/config.py

import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

class Config:
    # Alpaca API configuration
    ALPACA_API_KEY = os.getenv('ALPACA_API_KEY')
    ALPACA_SECRET_KEY = os.getenv('ALPACA_SECRET_KEY')
    ALPACA_BASE_URL = os.getenv('ALPACA_BASE_URL', 'https://paper-api.alpaca.markets')

    # ZeroMQ configuration
    ZEROMQ_PORT = os.getenv('ZEROMQ_PORT', '5555')

    # Other configurations can be added here


# File: components/integration_communication_module/credentials_manager.py
# Type: py

# components/integration_communication_module/credentials_manager.py

class CredentialsManager:
    def __init__(self, config):
        self._config = config

    def get_alpaca_credentials(self):
        if not self._config.ALPACA_API_KEY or not self._config.ALPACA_SECRET_KEY:
            raise ValueError("Alpaca API credentials are not set.")
        return {
            'api_key': self._config.ALPACA_API_KEY,
            'secret_key': self._config.ALPACA_SECRET_KEY,
            'base_url': self._config.ALPACA_BASE_URL
        }

    def get_zeromq_port(self):
        return self._config.ZEROMQ_PORT


# File: components/integration_communication_module/data_abstraction_layer.py
# Type: py



# File: components/integration_communication_module/logger.py
# Type: py

# components/integration_communication_module/logger.py

# components/integration_communication_module/logger.py

import logging
import os

# Ensure the logs directory exists
if not os.path.exists('logs'):
    os.makedirs('logs')

# Create a custom logger
logger = logging.getLogger('integration_communication_module')
logger.setLevel(logging.DEBUG)

# Create handlers
c_handler = logging.StreamHandler()
f_handler = logging.FileHandler('logs/integration_communication_module.log')

c_handler.setLevel(logging.INFO)
f_handler.setLevel(logging.WARNING)

# Create formatters and add them to handlers
c_format = logging.Formatter('%(name)s - %(levelname)s - %(message)s')
f_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

c_handler.setFormatter(c_format)
f_handler.setFormatter(f_format)

# Add handlers to the logger if they haven't been added already
if not logger.handlers:
    logger.addHandler(c_handler)
    logger.addHandler(f_handler)


# File: components/integration_communication_module/models.py
# Type: py

# components/integration_communication_module/models.py

from dataclasses import dataclass

@dataclass
class MarketData:
    symbol: str
    timestamp: str
    open: float
    high: float
    low: float
    close: float
    volume: int

@dataclass
class Order:
    id: str
    symbol: str
    qty: int
    side: str
    type: str
    time_in_force: str
    status: str


# File: components/integration_communication_module/service_factory.py
# Type: py

# components/integration_communication_module/service_factory.py

from .api_clients.alpaca_client import AlpacaClient
from .credentials_manager import CredentialsManager
from .config import Config

class ServiceFactory:
    @staticmethod
    def get_data_service(service_name):
        if service_name == 'alpaca':
            credentials_manager = CredentialsManager(Config())
            return AlpacaClient(credentials_manager)
        else:
            raise ValueError(f"Unknown data service: {service_name}")

    @staticmethod
    def get_trade_service(service_name):
        if service_name == 'alpaca':
            credentials_manager = CredentialsManager(Config())
            return AlpacaClient(credentials_manager)
        else:
            raise ValueError(f"Unknown trade service: {service_name}")


# File: components/integration_communication_module/trade_abstraction_layer.py
# Type: py



# File: components/integration_communication_module/api_clients/__init__.py
# Type: py

# components/integration_communication_module/api_clients/__init__.py

# This file can be left empty or used to initialize the submodule.


# File: components/integration_communication_module/api_clients/alpaca_client.py
# Type: py

# components/integration_communication_module/api_clients/alpaca_client.py

import alpaca_trade_api as tradeapi
from ..logger import logger
from .base_data_service import BaseDataService
from .base_trade_service import BaseTradeService
from ..models import MarketData, Order

class AlpacaClient(BaseDataService, BaseTradeService):
    def __init__(self, credentials_manager):
        creds = credentials_manager.get_alpaca_credentials()
        self.api = tradeapi.REST(
            key_id=creds['api_key'],
            secret_key=creds['secret_key'],
            base_url=creds['base_url']
        )
        logger.info("AlpacaClient initialized.")

    def get_account(self):
        try:
            account = self.api.get_account()
            logger.info("Account retrieved successfully.")
            return account
        except Exception as e:
            logger.error(f"Error retrieving account: {e}")
            raise

    def get_market_data(self, symbol, timeframe, start, end):
        try:
            barset = self.api.get_barset(symbol, timeframe, start=start, end=end)
            bars = barset[symbol]
            logger.info(f"Market data for {symbol} retrieved successfully.")
            # Convert to MarketData instances
            market_data = []
            for bar in bars:
                market_data.append(MarketData(
                    symbol=symbol,
                    timestamp=bar.t.isoformat(),
                    open=bar.o,
                    high=bar.h,
                    low=bar.l,
                    close=bar.c,
                    volume=bar.v
                ))
            return market_data
        except Exception as e:
            logger.error(f"Error retrieving market data for {symbol}: {e}")
            raise

    def place_order(self, symbol, qty, side, type, time_in_force):
        try:
            order = self.api.submit_order(
                symbol=symbol,
                qty=qty,
                side=side,
                type=type,
                time_in_force=time_in_force
            )
            logger.info(f"Order placed successfully: {order.id}")
            return Order(
                id=order.id,
                symbol=order.symbol,
                qty=order.qty,
                side=order.side,
                type=order.type,
                time_in_force=order.time_in_force,
                status=order.status
            )
        except Exception as e:
            logger.error(f"Error placing order for {symbol}: {e}")
            raise


# File: components/integration_communication_module/api_clients/base_data_service.py
# Type: py

# components/integration_communication_module/api_clients/base_data_service.py

from abc import ABC, abstractmethod

class BaseDataService(ABC):
    @abstractmethod
    def get_market_data(self, symbol, timeframe, start, end):
        pass


# File: components/integration_communication_module/api_clients/base_trade_service.py
# Type: py

# components/integration_communication_module/api_clients/base_trade_service.py

from abc import ABC, abstractmethod

class BaseTradeService(ABC):
    @abstractmethod
    def place_order(self, symbol, qty, side, type, time_in_force):
        pass

    @abstractmethod
    def get_account(self):
        pass


# File: components/integration_communication_module/api_clients/zeromq_client.py
# Type: py

# components/integration_communication_module/api_clients/zeromq_client.py

import zmq
from ..config import Config
from ..logger import logger

class ZeroMQClient:
    def __init__(self):
        self.context = zmq.Context()
        self.publisher = self.context.socket(zmq.PUB)
        self.port = Config.ZEROMQ_PORT
        self.publisher.bind(f"tcp://*:{self.port}")
        logger.info(f"ZeroMQ publisher bound to port {self.port}.")

    def publish(self, topic, message):
        try:
            self.publisher.send_multipart([topic.encode(), message.encode()])
            logger.debug(f"Published message on topic '{topic}'.")
        except Exception as e:
            logger.error(f"Error publishing message: {e}")
            raise

    def close(self):
        self.publisher.close()
        self.context.term()
        logger.info("ZeroMQ publisher closed.")


# File: components/integration_communication_module/api_clients/zeromq_subscriber.py
# Type: py

# components/integration_communication_module/api_clients/zeromq_subscriber.py

import zmq
from ..config import Config
from ..logger import logger

class ZeroMQSubscriber:
    def __init__(self):
        self.context = zmq.Context()
        self.subscriber = self.context.socket(zmq.SUB)
        self.port = Config.ZEROMQ_PORT
        self.subscriber.connect(f"tcp://localhost:{self.port}")
        logger.info(f"ZeroMQ subscriber connected to port {self.port}.")

    def subscribe(self, topic):
        self.subscriber.setsockopt_string(zmq.SUBSCRIBE, topic)
        logger.debug(f"Subscribed to topic '{topic}'.")

    def receive(self):
        try:
            topic, message = self.subscriber.recv_multipart()
            logger.debug(f"Received message on topic '{topic.decode()}'.")
            return topic.decode(), message.decode()
        except Exception as e:
            logger.error(f"Error receiving message: {e}")
            raise

    def close(self):
        self.subscriber.close()
        self.context.term()
        logger.info("ZeroMQ subscriber closed.")


