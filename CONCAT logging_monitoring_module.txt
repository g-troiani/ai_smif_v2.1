# Module: components/logging_monitoring_module

# File: components/logging_monitoring_module/__init__.py
# Type: py

# File: components/logging_monitoring_module/__init__.py

# Import core components for top-level access and mocking
from .alerts import send_alert
from .config import LoggingConfig, MonitoringConfig
from .logger import get_logger
from .monitor import HealthMonitor

# File: components/logging_monitoring_module/alerts.py
# Type: py

# File: components/logging_monitoring_module/alerts.py

import logging

logger = logging.getLogger(__name__)

def send_alert(message):
    from .config import MonitoringConfig
    recipients = MonitoringConfig.ALERT_RECIPIENTS
    for recipient in recipients:
        logger.warning(f"Alert sent to {recipient}: {message}")

# File: components/logging_monitoring_module/config.py
# Type: py

# File: components/logging_monitoring_module/config.py

import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

class LoggingConfig:
    LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
    LOG_FILE = os.getenv('LOG_FILE', 'logs/application.log')
    _initialized = False

    @classmethod
    def ensure_log_directory(cls):
        if not cls._initialized:
            path = Path(cls.LOG_FILE).resolve()  # Get absolute path
            path.parent.mkdir(parents=True, exist_ok=True)
            path.touch(exist_ok=True)
            cls._initialized = True

class MonitoringConfig:
    ENABLE_MONITORING = os.getenv('ENABLE_MONITORING', 'True') == 'True'
    HEALTH_CHECK_INTERVAL = int(os.getenv('HEALTH_CHECK_INTERVAL', '60'))
    ALERT_RECIPIENTS = os.getenv('ALERT_RECIPIENTS', 'admin@example.com').split(',')

# File: components/logging_monitoring_module/logger.py
# Type: py

# File: components/logging_monitoring_module/logger.py

import logging
from .logging_config import setup_logging

def get_logger(name):
    setup_logging()
    return logging.getLogger(name)

# File: components/logging_monitoring_module/logging_config.py
# Type: py

# File: components/logging_monitoring_module/logging_config.py

import logging
import logging.config
from .config import LoggingConfig

def setup_logging():
    LoggingConfig.ensure_log_directory()
    
    LOGGING_CONFIG = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'standard': {
                'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            },
            'simple': {
                'format': '%(levelname)s - %(message)s'
            },
        },
        'handlers': {
            'console': {
                'level': LoggingConfig.LOG_LEVEL,
                'class': 'logging.StreamHandler',
                'formatter': 'simple'
            },
            'file': {
                'level': 'WARNING',
                'class': 'logging.FileHandler',
                'filename': LoggingConfig.LOG_FILE,
                'formatter': 'standard',
                'encoding': 'utf8'
            },
        },
        'loggers': {
            '': {
                'handlers': ['console', 'file'],
                'level': LoggingConfig.LOG_LEVEL,
                'propagate': True
            },
        }
    }
    
    logging.config.dictConfig(LOGGING_CONFIG)


# File: components/logging_monitoring_module/models.py
# Type: py

# File: components/logging_monitoring_module/models.py

from dataclasses import dataclass

@dataclass
class MarketData:
    symbol: str
    timestamp: str
    open: float
    high: float
    low: float
    close: float
    volume: int

@dataclass
class Order:
    id: str
    symbol: str
    qty: int
    side: str
    type: str
    time_in_force: str
    status: str

# File: components/logging_monitoring_module/monitor.py
# Type: py

# File: components/logging_monitoring_module/monitor.py

import threading
import time
import requests
import logging
from . import send_alert  # Import from root module for proper mocking

logger = logging.getLogger(__name__)

class HealthMonitor(threading.Thread):
    def __init__(self, services):
        super().__init__()
        self.services = services
        from .config import MonitoringConfig
        self.interval = MonitoringConfig.HEALTH_CHECK_INTERVAL
        self.running = True
        self._stop_event = threading.Event()
        self._first_check = True

    def check_service(self, service_name, url):
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                logger.info(f"Service '{service_name}' is up.")
            else:
                msg = f"Service '{service_name}' is down. Status code: {response.status_code}"
                logger.warning(msg)
                if self._first_check:
                    send_alert(msg)
        except Exception as e:
            msg = f"Error checking service '{service_name}': Connection error"
            logger.error(msg)
            if self._first_check:
                send_alert(msg)
        finally:
            self._first_check = False

    def run(self):
        logger.info("HealthMonitor started.")
        while self.running and not self._stop_event.is_set():
            for service_name, url in self.services.items():
                if self._stop_event.is_set():
                    break
                self.check_service(service_name, url)
                break  # Only check once for testing
            
            if self._stop_event.wait(timeout=self.interval):
                break
        logger.info("HealthMonitor stopped.")

    def stop(self):
        self.running = False
        self._stop_event.set()
        self.join(timeout=1)


