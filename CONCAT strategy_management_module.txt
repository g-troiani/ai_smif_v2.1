# Module: components/strategy_management_module

# File: components/strategy_management_module/__init__.py
# Type: py

# File: components/strategy_management_module/__init__.py
"""
Strategy Management Module - Handles trading strategy configuration and execution
"""
from .strategies.strategy_base import StrategyBase


# File: components/strategy_management_module/config.py
# Type: py

# File: components/strategy_management_module/config.py
"""
Changes:
- Added configuration constants for strategies
- Added type hints and docstring
"""
"""
Configuration settings for the Strategy Management Module
"""
# Default settings for strategies
STRATEGY_SETTINGS = {
    'default_allocation': 5000,  # Default capital allocation per strategy
    'max_active_strategies': 5,  # Maximum number of concurrent active strategies
    'validation_thresholds': {
        'min_sharpe_ratio': 0.5,
        'max_drawdown': -0.2
    }
}

# File: components/strategy_management_module/strategy_manager.py
# Type: py

# File: components/strategy_management_module/strategy_manager.py

import importlib
import os
import json
import logging
from typing import Dict, List, Optional

class StrategyManager:
    """Manages trading strategy configurations and lifecycle."""
    
    # Strategy class mapping
    STRATEGY_CLASS_MAPPING = {
        'moving_average_crossover': 'MovingAverageCrossover',
        'rsi_strategy': 'RSIStrategy',  # This was wrong - correct case
        'macd_strategy': 'MACDStrategy',  # This was wrong - correct case
        'bollinger_bands_strategy': 'BollingerBandsStrategy',
        'momentum_strategy': 'MomentumStrategy'
    }

    def __init__(self, config_file: str = 'config/strategies.json'):
        """
        Initialize the StrategyManager.
        
        Args:
            config_file: Path to the strategies configuration file
        """
        self.config_file = config_file
        self.strategies = {}
        self.logger = logging.getLogger(__name__)
        self.load_strategies()

    def load_strategies(self) -> None:
        """Load strategies from the configuration file."""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r') as f:
                    strategies_config = json.load(f)
                    for strategy_name, params in strategies_config.items():
                        self.add_strategy(strategy_name, params)
        except (json.JSONDecodeError, IOError) as e:
            self.logger.error(f"Error loading strategies: {e}")

    def save_strategies(self) -> None:
        """Save current strategy configurations to file."""
        try:
            strategies_config = {name: strategy.params 
                               for name, strategy in self.strategies.items()}
            with open(self.config_file, 'w') as f:
                json.dump(strategies_config, f, indent=4)
        except IOError as e:
            self.logger.error(f"Error saving strategies: {e}")

    def add_strategy(self, strategy_name: str, params: dict) -> bool:
        """
        Add a new strategy.
        
        Args:
            strategy_name: Name of the strategy
            params: Strategy parameters
            
        Returns:
            bool: True if successful, False otherwise
        """
        try:
            module_name = f"components.strategy_management_module.strategies.{strategy_name}"
            module = importlib.import_module(module_name)
            
            # Special handling for known acronyms
            known_acronyms = {'rsi': 'RSI', 'macd': 'MACD'}
            
            # Split the strategy name and process each part
            parts = strategy_name.replace('_strategy', '').split('_')
            processed_parts = []
            
            for part in parts:
                if part.lower() in known_acronyms:
                    processed_parts.append(known_acronyms[part.lower()])
                else:
                    processed_parts.append(part.title())
                    
            class_name = ''.join(processed_parts) + 'Strategy'
            
            strategy_class = getattr(module, class_name)
            strategy_instance = strategy_class(params)
            self.strategies[strategy_name] = strategy_instance
            self.save_strategies()
            return True
        except Exception as e:
            self.logger.error(f"Error adding strategy '{strategy_name}': {e}")
            return False

    def remove_strategy(self, strategy_name: str) -> bool:
        """
        Remove a strategy.
        
        Args:
            strategy_name: Name of the strategy to remove
        
        Returns:
            bool: True if successful, False otherwise
        """
        if strategy_name in self.strategies:
            del self.strategies[strategy_name]
            self.save_strategies()
            return True
        return False

    def get_strategy(self, strategy_name: str):
        """
        Get a strategy instance.
        
        Args:
            strategy_name: Name of the strategy
            
        Returns:
            Strategy instance or None
        """
        return self.strategies.get(strategy_name)

    def list_strategies(self) -> List[str]:
        """
        Get list of all available strategies.
        
        Returns:
            List of strategy names
        """
        return list(self.strategies.keys())

    def get_strategy_params(self, strategy_name: str) -> Optional[Dict]:
        """
        Get parameters for a specific strategy.
        
        Args:
            strategy_name: Name of the strategy
            
        Returns:
            Dictionary of parameters or None
        """
        strategy = self.get_strategy(strategy_name)
        return strategy.params if strategy else None

# File: components/strategy_management_module/strategies/__init__.py
# Type: py

# File: components/strategy_management_module/strategies/__init__.py
from .strategy_base import StrategyBase

# File: components/strategy_management_module/strategies/bollinger_bands_strategy.py
# Type: py

# File: components/strategy_management_module/strategies/bollinger_bands_strategy.py
from components.strategy_management_module.strategies.strategy_base import StrategyBase
import pandas as pd

class BollingerBandsStrategy(StrategyBase):
    """Bollinger Bands Strategy."""

    default_params = {
        'window': 20,
        'num_std': 2
    }

    def __init__(self, params=None):
        """Initialize strategy with parameters."""
        if params is None:
            params = self.default_params
        super().__init__(params)

    def validate_params(self):
        """Validate strategy parameters."""
        window = self.params.get('window')
        num_std = self.params.get('num_std')

        if not isinstance(window, int) or window <= 0:
            raise ValueError("window must be a positive integer")
        if not isinstance(num_std, (int, float)) or num_std <= 0:
            raise ValueError("num_std must be a positive number")

    def generate_signals(self, data):
        """Generate trading signals."""
        rolling_mean = data['close'].rolling(window=self.params['window']).mean()
        rolling_std = data['close'].rolling(window=self.params['window']).std()
        
        upper_band = rolling_mean + (rolling_std * self.params['num_std'])
        lower_band = rolling_mean - (rolling_std * self.params['num_std'])
        
        signals = pd.DataFrame(index=data.index)
        signals['signal'] = 0.0
        signals['signal'] = ((data['close'] <= lower_band).astype(float) - 
                           (data['close'] >= upper_band).astype(float))
        signals['positions'] = signals['signal'].diff()
        
        return signals

# File: components/strategy_management_module/strategies/macd_strategy.py
# Type: py

# File: components/strategy_management_module/strategies/macd_strategy.py
from components.strategy_management_module.strategies.strategy_base import StrategyBase
import pandas as pd

class MACDStrategy(StrategyBase):
    """Moving Average Convergence Divergence (MACD) Strategy."""

    default_params = {
        'fast_period': 12,
        'slow_period': 26,
        'signal_period': 9
    }

    def __init__(self, params=None):
        """Initialize strategy with parameters."""
        if params is None:
            params = self.default_params
        super().__init__(params)

    def validate_params(self):
        """Validate strategy parameters."""
        fast_period = self.params.get('fast_period')
        slow_period = self.params.get('slow_period')
        signal_period = self.params.get('signal_period')

        if not all(isinstance(x, int) and x > 0 
                  for x in [fast_period, slow_period, signal_period]):
            raise ValueError("All periods must be positive integers")
        if fast_period >= slow_period:
            raise ValueError("fast_period must be less than slow_period")

    def generate_signals(self, data):
        """Generate trading signals."""
        exp1 = data['close'].ewm(span=self.params['fast_period'], 
                                adjust=False).mean()
        exp2 = data['close'].ewm(span=self.params['slow_period'], 
                                adjust=False).mean()
        macd = exp1 - exp2
        signal_line = macd.ewm(span=self.params['signal_period'], 
                              adjust=False).mean()
        
        signals = pd.DataFrame(index=data.index)
        signals['signal'] = 0.0
        signals['signal'] = (macd > signal_line).astype(float)
        signals['positions'] = signals['signal'].diff()
        
        return signals

# File: components/strategy_management_module/strategies/momentum_stratey.py
# Type: py

# File: components/strategy_management_module/strategies/momentum_strategy.py
from components.strategy_management_module.strategies.strategy_base import StrategyBase
import pandas as pd

class MomentumStrategy(StrategyBase):
    """Simple Momentum Strategy."""

    default_params = {
        'lookback_period': 20,
        'threshold': 0
    }

    def __init__(self, params=None):
        """Initialize strategy with parameters."""
        if params is None:
            params = self.default_params
        super().__init__(params)

    def validate_params(self):
        """Validate strategy parameters."""
        lookback_period = self.params.get('lookback_period')
        threshold = self.params.get('threshold')

        if not isinstance(lookback_period, int) or lookback_period <= 0:
            raise ValueError("lookback_period must be a positive integer")
        if not isinstance(threshold, (int, float)):
            raise ValueError("threshold must be a number")

    def generate_signals(self, data):
        """Generate trading signals."""
        momentum = data['close'].pct_change(periods=self.params['lookback_period'])
        
        signals = pd.DataFrame(index=data.index)
        signals['signal'] = 0.0
        signals['signal'] = (momentum > self.params['threshold']).astype(float)
        signals['positions'] = signals['signal'].diff()
        
        return signals

# File: components/strategy_management_module/strategies/moving_average_crossover.py
# Type: py

# File: components/strategy_management_module/strategies/moving_average_crossover.py
"""
Changes:
- Added proper type hints
- Improved validation
- Added logging
- Added signal generation error handling
"""
import logging
import pandas as pd
import numpy as np
from typing import Dict
from .strategy_base import StrategyBase

class MovingAverageCrossoverStrategy(StrategyBase):
    """Moving Average Crossover trading strategy."""

    default_params = {
        'short_window': 40,
        'long_window': 100
    }

    def __init__(self, params: Dict = None):
        self.logger = logging.getLogger(__name__)
        super().__init__(params or self.default_params)

    def validate_params(self) -> None:
        """Validate strategy parameters."""
        short_window = self.params.get('short_window')
        long_window = self.params.get('long_window')

        if not all(isinstance(x, int) and x > 0 
                  for x in [short_window, long_window]):
            raise ValueError("Windows must be positive integers")
        if short_window >= long_window:
            raise ValueError("short_window must be less than long_window")

    def generate_signals(self, data: pd.DataFrame) -> pd.DataFrame:
        """Generate trading signals based on moving average crossover."""
        try:
            signals = pd.DataFrame(index=data.index)
            signals['signal'] = 0.0

            # Calculate moving averages
            signals['short_mavg'] = data['close'].rolling(
                window=self.params['short_window'], 
                min_periods=1).mean()
            signals['long_mavg'] = data['close'].rolling(
                window=self.params['long_window'], 
                min_periods=1).mean()

            # Generate signals using loc to avoid chained assignment warning
            signals.loc[signals.index, 'signal'] = np.where(
                signals['short_mavg'] > signals['long_mavg'], 1.0, 0.0)
            signals['positions'] = signals['signal'].diff()

            return signals
        except Exception as e:
            self.logger.error(f"Error generating signals: {e}")
            raise

# File: components/strategy_management_module/strategies/rsi_strategy.py
# Type: py

# File: components/strategy_management_module/strategies/rsi_strategy.py
from components.strategy_management_module.strategies.strategy_base import StrategyBase
import pandas as pd

class RSIStrategy(StrategyBase):
    """Relative Strength Index (RSI) Strategy."""

    default_params = {
        'period': 14,
        'overbought': 70,
        'oversold': 30
    }

    def __init__(self, params=None):
        """Initialize strategy with parameters."""
        if params is None:
            params = self.default_params
        super().__init__(params)

    def validate_params(self):
        """Validate strategy parameters."""
        period = self.params.get('period')
        overbought = self.params.get('overbought')
        oversold = self.params.get('oversold')

        if not isinstance(period, int) or period <= 0:
            raise ValueError("period must be a positive integer")
        if not (0 < oversold < overbought < 100):
            raise ValueError("Invalid overbought/oversold levels")

    def generate_signals(self, data):
        """Generate trading signals."""
        delta = data['close'].diff()
        gain = delta.where(delta > 0, 0).fillna(0)
        loss = (-delta.where(delta < 0, 0)).fillna(0)
        
        avg_gain = gain.rolling(window=self.params['period'], 
                              min_periods=1).mean()
        avg_loss = loss.rolling(window=self.params['period'], 
                              min_periods=1).mean()
        
        rs = avg_gain / avg_loss
        rsi = 100 - (100 / (1 + rs))

        signals = pd.DataFrame(index=data.index)
        signals['signal'] = 0.0
        signals.loc[rsi > self.params['overbought'], 'signal'] = -1.0  # Fixed chained assignment
        signals.loc[rsi < self.params['oversold'], 'signal'] = 1.0     # Fixed chained assignment
        signals['positions'] = signals['signal'].diff()

        return signals

# File: components/strategy_management_module/strategies/strategy_base.py
# Type: py

# File: components/strategy_management_module/strategies/strategy_base.py
from abc import ABC, abstractmethod
from typing import Dict
import pandas as pd

class StrategyBase(ABC):
    """Base class for all trading strategies."""

    def __init__(self, params: Dict):
        """
        Initialize strategy with parameters.
        
        Args:
            params: Strategy parameters
        """
        self.params = params
        self.validate_params()

    @abstractmethod
    def generate_signals(self, data: pd.DataFrame) -> pd.DataFrame:
        """
        Generate trading signals from market data.
        
        Args:
            data: Market data with OHLCV columns
            
        Returns:
            DataFrame with trading signals
        """
        pass

    @abstractmethod
    def validate_params(self) -> None:
        """
        Validate strategy parameters.
        
        Raises:
            ValueError: If parameters are invalid
        """
        pass


