# Module: components/data_management_module

# File: components/data_management_module/__init__.py
# Type: py



# File: components/data_management_module/alpaca_api.py
# Type: py

import logging
import time
import requests
from datetime import datetime, timedelta
import pandas as pd
import pytz
from alpaca_trade_api.rest import REST, TimeFrame, TimeFrameUnit
from .config import config
class AlpacaAPIClient:
    """Client for interacting with Alpaca's REST API"""
    
    def __init__(self):
        self.logger = self._setup_logging()
        self.base_url = config.get('api', 'base_url')
        self.headers = {
            'APCA-API-KEY-ID': config.get('api', 'key_id'),
            'APCA-API-SECRET-KEY': config.get('api', 'secret_key')
        }
        # Instantiate the REST API client
        self.api = REST(
            key_id=config.get('api', 'key_id'),
            secret_key=config.get('api', 'secret_key'),
            base_url=config.get('api', 'base_url')
        )
        # Rate limiting settings
        self.retry_count = config.get_int('api', 'rate_limit_retry_attempts')
        self.retry_delay = config.get_int('api', 'rate_limit_retry_wait')
        self.rate_limit_delay = config.get_float('api', 'rate_limit_delay')
        self._last_request_time = 0
        
        # Add chunk size for data fetching
        self.chunk_size = 15  # Number of days per chunk


    def _setup_logging(self):
        """Set up logging for the API client"""
        logger = logging.getLogger('alpaca_api')
        logger.setLevel(logging.INFO)
        handler = logging.FileHandler(config.get('DEFAULT', 'log_file'))
        handler.setFormatter(logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
        logger.addHandler(handler)
        return logger

    def _respect_rate_limit(self):
        """Implement rate limiting to avoid API throttling"""
        now = time.time()
        time_since_last = now - self._last_request_time
        if time_since_last < self.rate_limit_delay:
            sleep_time = self.rate_limit_delay - time_since_last
            time.sleep(sleep_time)
        self._last_request_time = time.time()


    def fetch_historical_data(self, ticker, start_date, end_date, timeframe='5Min'):
        """Fetch historical data with proper formatting"""
        all_data = []
        current_date = start_date
        chunk_count = 0

        while current_date < end_date:
            chunk_end = min(current_date + timedelta(days=self.chunk_size), end_date)
            chunk_count += 1
            print(f"CRITICAL DEBUG: Fetching chunk {chunk_count}: {current_date} to {chunk_end}")
            chunk_data = self._fetch_data_chunk(ticker, current_date, chunk_end, timeframe)

            if not chunk_data.empty:
                print(f"CRITICAL DEBUG: Retrieved {len(chunk_data)} records in chunk {chunk_count}")
                all_data.append(chunk_data)
            else:
                print(f"CRITICAL DEBUG: No data retrieved in chunk {chunk_count}")

            current_date = chunk_end + timedelta(seconds=1)  # Avoid overlapping

        if all_data:
            final_data = pd.concat(all_data)
        else:
            final_data = pd.DataFrame()

        print(f"CRITICAL DEBUG: Final data shape={final_data.shape}, columns={final_data.columns.tolist()}")
        if not final_data.empty:
            earliest_date = final_data.index.min()
            latest_date = final_data.index.max()
            print(f"CRITICAL DEBUG: Data ranges from {earliest_date} to {latest_date}")

        return final_data
    
    
    def _fetch_data_chunk(self, ticker, start_date, end_date, timeframe):
        for attempt in range(self.retry_count):
            try:
                self._respect_rate_limit()
                
                # TimeFrame mapping
                timeframe_map = {
                    '1Min': TimeFrame(1, TimeFrameUnit.Minute),
                    '5Min': TimeFrame(5, TimeFrameUnit.Minute),
                    '15Min': TimeFrame(15, TimeFrameUnit.Minute),
                    '1Hour': TimeFrame(1, TimeFrameUnit.Hour),
                    '1Day': TimeFrame(1, TimeFrameUnit.Day)
                }
                tf = timeframe_map.get(timeframe)
                if tf is None:
                    raise ValueError(f"Invalid timeframe: {timeframe}")
                
                bars = self.api.get_bars(
                    ticker,
                    timeframe=tf,
                    start=start_date.isoformat(),
                    end=end_date.isoformat(),
                    adjustment='raw',
                    limit=10000  # Max limit per request
                ).df

                if bars.empty:
                    self.logger.warning(f"No data returned for {ticker} between {start_date} and {end_date}")
                    print(f"CRITICAL DEBUG: No data returned for {ticker} between {start_date} and {end_date}")
                    return pd.DataFrame()

                # Ensure the index is a DateTimeIndex
                if not isinstance(bars.index, pd.DatetimeIndex):
                    bars.index = pd.to_datetime(bars.index)
                bars = bars.sort_index()

                # Rename columns if necessary
                # Example: If columns are ['o', 'h', 'l', 'c', 'v'], rename them
                expected_columns = ['open', 'high', 'low', 'close', 'volume']
                if set(['o', 'h', 'l', 'c', 'v']).issubset(bars.columns):
                    bars.rename(columns={'o': 'open', 'h': 'high', 'l': 'low', 'c': 'close', 'v': 'volume'}, inplace=True)

                # Convert timezone and filter market hours
                ny_tz = pytz.timezone('America/New_York')
                bars.index = bars.index.tz_convert(ny_tz)
                bars = bars.between_time('09:30', '16:00')

                self.logger.info(f"Successfully fetched {len(bars)} bars for {ticker} from {start_date} to {end_date}")
                print(f"CRITICAL DEBUG: Successfully fetched {len(bars)} bars for {ticker} from {start_date} to {end_date}")
                return bars

            except Exception as e:
                self.logger.warning(f"Attempt {attempt + 1} failed for {ticker}: {str(e)}")
                print(f"CRITICAL DEBUG: Attempt {attempt + 1} failed for {ticker}: {str(e)}")
                if attempt == self.retry_count - 1:
                    self.logger.error(f"Failed to fetch data for {ticker} after {self.retry_count} attempts")
                    print(f"CRITICAL DEBUG: Failed to fetch data for {ticker} after {self.retry_count} attempts")
                    raise
                time.sleep(self.retry_delay * (attempt + 1))  # Exponential backoff



    def verify_api_access(self):
        """Verify API credentials and access"""
        try:
            clock = self.api.get_clock()
            if clock:
                self.logger.info("API access verified successfully")
                return True
            else:
                self.logger.error("API access verification failed")
                return False
        except Exception as e:
            self.logger.error(f"API access verification failed: {str(e)}")
            return False

    def get_bars(self, ticker, start_date, end_date):
        """Get historical bars for a ticker"""
        try:
            self.logger.info(f"Requesting bars for {ticker} from {start_date} to {end_date}")
            
            bars = self.api.get_bars(
                ticker,
                TimeFrame(5, TimeFrame.Unit.Minute),
                start=start_date.isoformat(),
                end=end_date.isoformat(),
                adjustment='raw'
            ).df

            if bars.empty:
                self.logger.warning(f"No data returned for {ticker} between {start_date} and {end_date}")
                return pd.DataFrame()

            self.logger.info(f"Successfully fetched {len(bars)} bars for {ticker}")
            return bars

        except Exception as e:
            self.logger.error(f"Error fetching bars: {str(e)}")
            raise

    def _get_bars_for_date(self, ticker, date):
        """Get bars for a specific date"""
        try:
            start_date = datetime.combine(date, datetime.min.time())
            end_date = datetime.combine(date, datetime.max.time())
            bars = self.get_bars(ticker, start_date, end_date)
            if not bars.empty:
                self.logger.info(f"Fetched {len(bars)} bars for {ticker} on {date.strftime('%Y-%m-%d')}")
            return bars
        except Exception as e:
            self.logger.error(f"Error fetching bars for {date}: {str(e)}")
            return pd.DataFrame()


# File: components/data_management_module/config.py
# Type: py

# components/data_management_module/config.py

import os
from configparser import ConfigParser
from pathlib import Path

class DataConfig:
    def __init__(self):
        self.config = ConfigParser()
        
        # Define base paths
        self.project_root = Path(__file__).parent.parent.parent
        self.data_dir = self.project_root / 'data'
        self.log_dir = self.project_root / 'logs'
        
        # Create directories if they don't exist
        self.data_dir.mkdir(exist_ok=True)
        self.log_dir.mkdir(exist_ok=True)
        
        self.load_config()

    def load_config(self):
        """Load configuration from config file and environment variables"""
        # Default settings
        self.config['DEFAULT'] = {
            'database_path': str(self.data_dir / 'data.db'),
            'tickers_file': str(self.project_root / 'tickers.csv'),
            'log_file': str(self.log_dir / 'data_manager.log'),
            'historical_data_years': '5',
            'data_frequency_minutes': '5',
            'batch_size': '1000',
            'zeromq_port': '5555',
            'zeromq_topic': 'market_data'
        }

        # Data API settings
        self.config['api'] = {
            'base_url': 'https://data.alpaca.markets/v2',
            'key_id': os.getenv('APCA_API_KEY_ID', ''),
            'secret_key': os.getenv('APCA_API_SECRET_KEY', ''),
            'rate_limit_retry_attempts': '3',
            'rate_limit_retry_wait': '5',
            'rate_limit_delay': '0.2'
        }

        # Validate required settings
        self._validate_config()

    def _validate_config(self):
        """Validate critical configuration settings"""
        if not self.config['api']['key_id'] or not self.config['api']['secret_key']:
            raise ValueError("Alpaca API credentials not found in environment variables")

    def get(self, section, key):
        """Get a configuration value"""
        return self.config.get(section, key)

    def get_int(self, section, key):
        """Get an integer configuration value"""
        return self.config.getint(section, key)

    def get_float(self, section, key):
        """Get a float configuration value"""
        return self.config.getfloat(section, key)

# Global config instance
config = DataConfig()

# File: components/data_management_module/data_access_layer.py
# Type: py

# components/data_management_module/data_access_layer.py

from sqlalchemy import create_engine, Column, String, Integer, Float, DateTime, ForeignKey, UniqueConstraint, func, text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import SQLAlchemyError, IntegrityError
from datetime import datetime, timedelta
import logging
from .config import config

Base = declarative_base()

class Ticker(Base):
    __tablename__ = 'tickers'
    symbol = Column(String, primary_key=True)
    last_updated = Column(DateTime, default=datetime.utcnow)
    added_date = Column(DateTime, default=datetime.utcnow)

class HistoricalData(Base):
    __tablename__ = 'historical_data'
    id = Column(Integer, primary_key=True)
    ticker_symbol = Column(String, ForeignKey('tickers.symbol'))
    timestamp = Column(DateTime, nullable=False)
    open = Column(Float, nullable=False)
    high = Column(Float, nullable=False)
    low = Column(Float, nullable=False)
    close = Column(Float, nullable=False)
    volume = Column(Integer, nullable=False)

    # Ensure we don't have duplicate data points
    __table_args__ = (UniqueConstraint('ticker_symbol', 'timestamp'),)

    @staticmethod
    def validate_price_data(open, high, low, close, volume):
        """Validate price data before insertion"""
        if not all(isinstance(x, (int, float)) for x in [open, high, low, close, volume]):
            raise ValueError("All price and volume data must be numeric")
        if not (high >= max(open, close) and low <= min(open, close)):
            raise ValueError("High/low prices are inconsistent with open/close prices")
        if volume < 0:
            raise ValueError("Volume cannot be negative")
        return True

class DatabaseManager:
    def __init__(self):
        self.engine = create_engine(
            f"sqlite:///{config.get('DEFAULT', 'database_path')}",
            connect_args={'check_same_thread': False, 'timeout': 15}  # Added parameters
        )
        # Optionally set journal mode to WAL to improve concurrency
        with self.engine.connect() as conn:
            conn.execute(text('PRAGMA journal_mode=WAL;'))
        Base.metadata.create_all(self.engine)
        self.Session = sessionmaker(bind=self.engine)
        self._setup_logging()

    def _setup_logging(self):
        self.logger = logging.getLogger('database_manager')
        self.logger.setLevel(logging.INFO)
        handler = logging.FileHandler(config.get('DEFAULT', 'log_file'))
        handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
        self.logger.addHandler(handler)

    def add_ticker(self, symbol):
        """Add a new ticker to the database"""
        session = self.Session()
        try:
            ticker = Ticker(symbol=symbol)
            session.add(ticker)
            session.commit()
            self.logger.info(f"Added new ticker: {symbol}")
        except SQLAlchemyError as e:
            session.rollback()
            self.logger.error(f"Error adding ticker {symbol}: {str(e)}")
            raise
        finally:
            session.close()

    def bulk_insert_historical_data(self, records):
        """Insert multiple historical data records"""
        session = self.Session()
        try:
            session.bulk_save_objects(records)
            session.commit()
            self.logger.info(f"Bulk inserted {len(records)} records")
        except SQLAlchemyError as e:
            session.rollback()
            self.logger.error(f"Error in bulk insert: {str(e)}")
            raise
        finally:
            session.close()

    def get_historical_data(self, ticker, start_date, end_date):
        """Retrieve historical data for a specific ticker and date range"""
        session = self.Session()
        try:
            query = session.query(HistoricalData).filter(
                HistoricalData.ticker_symbol == ticker,
                HistoricalData.timestamp.between(start_date, end_date)
            ).order_by(HistoricalData.timestamp)
            return query.all()
        finally:
            session.close()

    def cleanup_old_data(self, days_to_keep=30):
        """Cleanup historical data older than specified days"""
        session = self.Session()
        try:
            cutoff_date = datetime.utcnow() - timedelta(days=days_to_keep)
            deleted = session.query(HistoricalData).filter(
                HistoricalData.timestamp < cutoff_date
            ).delete()
            session.commit()
            if deleted > 0:
                session.execute(text('VACUUM'))  # Defragment the database
            self.logger.info(f"Cleaned up {deleted} old records")
        except SQLAlchemyError as e:
            session.rollback()
            self.logger.error(f"Error during cleanup: {str(e)}")
            raise
        finally:
            session.close()

    def create_session(self):
        """Create and return a new database session"""
        try:
            session = self.Session()
            return session
        except Exception as e:
            self.logger.error(f"Error creating database session: {str(e)}")
            raise

# Global database manager instance
db_manager = DatabaseManager()


# File: components/data_management_module/data_manager.py
# Type: py

# components/data_management_module/data_manager.py

import pandas as pd
import threading
import logging
from datetime import datetime, timedelta, time
import time as time_module  # Alias to avoid conflict with datetime.time
from pathlib import Path
from .config import config
from .alpaca_api import AlpacaAPIClient
from .data_access_layer import db_manager, Ticker, HistoricalData
from .real_time_data import RealTimeDataStreamer
import pytz
from dateutil.relativedelta import relativedelta  # Added for accurate date calculations
from sqlalchemy.exc import IntegrityError        # Added for handling database integrity errors
import traceback         


class DataManager:
    """Main class for managing market data operations"""

    def __init__(self):
        self.logger = self._setup_logging()
        self.api_client = AlpacaAPIClient()
        self.lock = threading.RLock()
        self.tickers = self._load_tickers()
        self.real_time_streamer = None
        self.logger.info("DataManager initialized.")
        self._last_maintenance = None
        self.initialize_database()
        self.start_real_time_streaming()

    def _setup_logging(self):
        """Set up logging for the data manager"""
        logger = logging.getLogger('data_manager')
        logger.setLevel(logging.INFO)
        handler = logging.FileHandler(config.get('DEFAULT', 'log_file'))
        handler.setFormatter(logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
        logger.addHandler(handler)
        return logger

    def _load_tickers(self):
        """Load tickers from the configured CSV file"""
        try:
            tickers_file = Path(config.get('DEFAULT', 'tickers_file'))
            if not tickers_file.exists():
                self.logger.error(f"Tickers file not found: {tickers_file}")
                raise FileNotFoundError(f"Tickers file not found: {tickers_file}")
                
            df = pd.read_csv(tickers_file)
            if 'ticker' not in df.columns:
                raise ValueError("CSV file must contain a 'ticker' column")
                
            tickers = df['ticker'].unique().tolist()
            self.logger.info(f"Loaded {len(tickers)} tickers")
            return tickers
        except Exception as e:
            self.logger.error(f"Failed to load tickers: {str(e)}")
            raise


    def initialize_database(self):
        """Initialize database with historical data"""
        try:
            with self.lock:
                print(f"CRITICAL DEBUG: Starting database initialization")
                ny_tz = pytz.timezone('America/New_York')
                end_date = datetime.now(ny_tz)
                
                # Retrieve the number of years from the configuration
                years = config.get_int('DEFAULT', 'historical_data_years')
                start_date = end_date - relativedelta(years=years)  # Use relativedelta for accurate year subtraction

                # Print the date range for debugging
                print(f"CRITICAL DEBUG: Date range from {start_date} to {end_date}")

                for ticker in self.tickers:
                    self.logger.info(f"Fetching historical data for {ticker}")

                    # Fetch and store historical data
                    historical_data = self.api_client.fetch_historical_data(
                        ticker, start_date, end_date, timeframe='5Min'
                    )

                    print(f"CRITICAL DEBUG: Got data empty={historical_data.empty}")

                    if not historical_data.empty:
                        # Filter data to market hours (9:30 AM to 4:00 PM EST)
                        historical_data = self._filter_market_hours(historical_data, ny_tz)
                        self._save_historical_data(ticker, historical_data)

                    # Respect rate limits
                    time_module.sleep(1)  # Ensure 'time_module' is correctly imported

        except Exception as e:
            self.logger.error(f"Error initializing database: {str(e)}")
            raise




                    
    def _filter_market_hours(self, data, timezone):
        """Filter data to only include market hours (9:30 AM to 4:00 PM EST)"""
        market_open = time(9, 30)    # Corrected from datetime_time(9, 30)
        market_close = time(16, 0)   # Corrected from datetime_time(16, 0)
        data = data.tz_convert(timezone)
        data = data.between_time(market_open, market_close)
        return data


    def fetch_historical_data(self, ticker, start_date, end_date, timeframe='5Min'):
        """Fetch historical data with proper formatting"""
        all_data = []
        current_date = start_date
        
        while current_date < end_date:
            chunk_end = min(current_date + timedelta(days=self.chunk_size), end_date)
            chunk_data = self._fetch_data_chunk(ticker, current_date, chunk_end, timeframe)
            
            if not chunk_data.empty:
                all_data.append(chunk_data)
            current_date = chunk_end + timedelta(seconds=1)  # Avoid overlapping

        final_data = pd.concat(all_data) if all_data else pd.DataFrame()
        print(f"CRITICAL DEBUG: Final data shape={final_data.shape}, columns={final_data.columns.tolist()}")

        if not final_data.empty:
            earliest_date = final_data.index.min()
            latest_date = final_data.index.max()
            print(f"CRITICAL DEBUG: Data ranges from {earliest_date} to {latest_date}")

        return final_data


    def _store_historical_data(self, ticker, df):
        """Store historical data in the database"""
        with self.lock:
            session = db_manager.Session()
            try:
                records = []
                for index, row in df.iterrows():
                    try:
                        HistoricalData.validate_price_data(
                            row['o'], row['h'], row['l'], row['c'], row['v']
                        )
                        record = HistoricalData(
                            ticker_symbol=ticker,
                            timestamp=index,
                            open=row['o'],
                            high=row['h'],
                            low=row['l'],
                            close=row['c'],
                            volume=row['v']
                        )
                        records.append(record)
                    except ValueError as e:
                        self.logger.warning(f"Skipping invalid data point for {ticker}: {str(e)}")

                if records:
                    session.bulk_save_objects(records)
                    session.commit()
                    self.logger.info(f"Stored {len(records)} records for {ticker}")
                    
            except Exception as e:
                session.rollback()
                self.logger.error(f"Database error for {ticker}: {str(e)}")
                raise
            finally:
                session.close()

    def start_real_time_streaming(self):
        """Start real-time data streaming"""
        if not self.real_time_streamer:
            self.logger.info("Starting real-time data streaming")
            try:
                self.real_time_streamer = RealTimeDataStreamer(self.tickers)
                # Start the streamer in a separate thread to make it non-blocking
                threading.Thread(target=self.real_time_streamer.start, daemon=True).start()
                self.logger.info("Real-time streaming started successfully")
            except Exception as e:
                self.logger.error(f"Failed to start real-time streaming: {str(e)}")
                raise
        else:
            self.logger.warning("Real-time streamer is already running")


    def stop_real_time_streaming(self):
        """Stop real-time data streaming"""
        if self.real_time_streamer:
            try:
                self.real_time_streamer.stop()
                self.real_time_streamer = None
                self.logger.info("Stopped real-time data streaming")
            except Exception as e:
                self.logger.error(f"Error stopping real-time stream: {str(e)}")
                raise

    def perform_maintenance(self):
        """Perform database maintenance"""
        try:
            current_time = datetime.now()
            # Only perform maintenance if it hasn't been done in the last 24 hours
            if (self._last_maintenance is None or 
                (current_time - self._last_maintenance).total_seconds() > 86400):
                
                db_manager.cleanup_old_data()
                self._last_maintenance = current_time
                self.logger.info("Completed database maintenance")
        except Exception as e:
            self.logger.error(f"Error during maintenance: {str(e)}")
            raise

    def get_historical_data(self, ticker, start_date, end_date):
        """Retrieve historical data for a specific ticker and date range"""
        try:
            data = db_manager.get_historical_data(ticker, start_date, end_date)
            if not data:
                self.logger.error(f"No data found for {ticker} between {start_date} and {end_date}")
            return data
        except Exception as e:
            self.logger.error(f"Error retrieving historical data: {str(e)}")
            raise

    def validate_data_integrity(self):
        """Validate data integrity across the database"""
        try:
            session = db_manager.Session()
            try:
                for ticker in self.tickers:
                    # Check for missing data points
                    last_record = session.query(HistoricalData)\
                        .filter_by(ticker_symbol=ticker)\
                        .order_by(HistoricalData.timestamp.desc())\
                        .first()
                    
                    if last_record:
                        # Update last_updated timestamp for the ticker
                        ticker_record = session.query(Ticker)\
                            .filter_by(symbol=ticker)\
                            .first()
                        if ticker_record:
                            ticker_record.last_updated = datetime.utcnow()
                            
                session.commit()
                self.logger.info("Completed data integrity validation")
                
            except Exception as e:
                session.rollback()
                self.logger.error(f"Error during data validation: {str(e)}")
                raise
            finally:
                session.close()
                
        except Exception as e:
            self.logger.error(f"Failed to validate data integrity: {str(e)}")
            raise

    def __del__(self):
        """Cleanup when the object is destroyed"""
        try:
            self.stop_real_time_streaming()
        except Exception as e:
            self.logger.error(f"Error during cleanup: {str(e)}")

    def get_backtrader_data(self, ticker, start_date, end_date):
        """
        Retrieves historical data in a format compatible with Backtrader.

        :param ticker: Stock ticker symbol.
        :param start_date: Start date as a datetime object.
        :param end_date: End date as a datetime object.
        :return: Pandas DataFrame with necessary columns.
        """
        try:
            # Get historical data
            data = self.get_historical_data(ticker, start_date, end_date)
            
            # Convert to DataFrame if we get a list
            if isinstance(data, list):
                df = pd.DataFrame(data)
            else:
                df = data
                
            # Check if we have data
            if df is None or (isinstance(df, pd.DataFrame) and df.empty):
                raise ValueError(f"No data found for ticker {ticker} between {start_date} and {end_date}")
                
            # Select and rename columns
            if isinstance(df, pd.DataFrame):
                df = df[['timestamp', 'open', 'high', 'low', 'close', 'volume']]
                df.rename(columns={'timestamp': 'datetime'}, inplace=True)
                df.set_index('datetime', inplace=True)
                df.index = pd.to_datetime(df.index)
                
            return df
            
        except Exception as e:
            self.logger.error(f"Error retrieving backtrader data for {ticker}: {str(e)}")
            # Return empty DataFrame instead of raising to maintain compatibility
            return pd.DataFrame()

    def _save_historical_data(self, ticker, df):
        """Store historical data in the database"""
        with self.lock:
            session = db_manager.Session()
            try:
                records = []
                for index, row in df.iterrows():
                    try:
                        # Updated column names to match DataFrame
                        HistoricalData.validate_price_data(
                            row['open'], row['high'], row['low'], row['close'], row['volume']
                        )
                        record = HistoricalData(
                            ticker_symbol=ticker,
                            timestamp=index,
                            open=row['open'],
                            high=row['high'],
                            low=row['low'],
                            close=row['close'],
                            volume=row['volume']
                        )
                        records.append(record)
                    except ValueError as e:
                        self.logger.warning(f"Skipping invalid data point for {ticker}: {str(e)}")
                        print(f"CRITICAL DEBUG: Skipping invalid data point for {ticker}: {str(e)}")

                if records:
                    batch_size = config.get_int('DEFAULT', 'batch_size')  # Use batch_size from config
                    num_records = len(records)
                    print(f"CRITICAL DEBUG: Attempting to save {num_records} records for {ticker}")

                    for i in range(0, num_records, batch_size):
                        batch = records[i:i+batch_size]
                        try:
                            session.bulk_save_objects(batch)
                            session.commit()
                            print(f"CRITICAL DEBUG: Successfully saved batch {i//batch_size +1} with {len(batch)} records")
                        except IntegrityError as ie:
                            session.rollback()
                            self.logger.warning(f"IntegrityError when saving batch {i//batch_size +1} for {ticker}: {str(ie)}")
                            print(f"CRITICAL DEBUG: IntegrityError when saving batch {i//batch_size +1} for {ticker}: {str(ie)}")
                        except Exception as e:
                            session.rollback()
                            self.logger.error(f"Exception when saving batch {i//batch_size +1} for {ticker}: {str(e)}")
                            print(f"CRITICAL DEBUG: Exception when saving batch {i//batch_size +1} for {ticker}: {str(e)}")
                            traceback.print_exc()
                            raise

                self.logger.info(f"Stored {len(records)} records for {ticker}")
                print(f"CRITICAL DEBUG: Stored {len(records)} records for {ticker}")
                    
            except Exception as e:
                session.rollback()
                self.logger.error(f"Database error for {ticker}: {str(e)}")
                print(f"CRITICAL DEBUG: Database error for {ticker}: {str(e)}")
                raise
            finally:
                session.close()
                print("CRITICAL DEBUG: Database session closed.")



    def __del__(self):
        """Cleanup when the object is destroyed"""
        try:
            self.stop_real_time_streaming()
        except Exception as e:
            self.logger.error(f"Error during cleanup: {str(e)}")

    def _fetch_historical_data(self, ticker):
        """Fetch historical data for a ticker"""
        try:
            end_date = datetime.now(pytz.timezone('US/Eastern'))
            start_date = end_date - timedelta(days=5*365)  # 5 years
            
            self.logger.info(f"Fetching data for {ticker}")
            data = self.alpaca_client.fetch_historical_data(
                ticker,
                start_date,
                end_date,
                timeframe='1Day'
            )
            
            if not data.empty:
                self.logger.info(f"Storing {len(data)} records for {ticker}")
                self._save_historical_data(ticker, data)
                self.logger.info(f"Successfully stored data for {ticker}")
            else:
                self.logger.warning(f"No data received for {ticker}")
                
            return data
        except Exception as e:
            self.logger.error(f"Error in fetch_historical_data for {ticker}: {e}")
            raise
        
    def fetch_historical_data_for_ticker(self, ticker_symbol):
        """Fetch and store historical data for a single ticker."""
        try:
            with self.lock:
                ny_tz = pytz.timezone('America/New_York')
                end_date = datetime.now(ny_tz)
                years = config.get_int('DEFAULT', 'historical_data_years')
                start_date = end_date - relativedelta(years=years)

                self.logger.info(f"Fetching historical data for {ticker_symbol}")

                historical_data = self.api_client.fetch_historical_data(
                    ticker_symbol, start_date, end_date, timeframe='5Min'
                )

                if not historical_data.empty:
                    historical_data = self._filter_market_hours(historical_data, ny_tz)
                    self._save_historical_data(ticker_symbol, historical_data)
                    self.logger.info(f"Historical data for {ticker_symbol} fetched and stored.")
                    print(f"Historical data for {ticker_symbol} fetched and stored.")
                else:
                    self.logger.warning(f"No historical data fetched for {ticker_symbol}")
                    print(f"No historical data fetched for {ticker_symbol}")
        except Exception as e:
            self.logger.error(f"Error fetching data for {ticker_symbol}: {str(e)}")
            print(f"Error fetching data for {ticker_symbol}: {str(e)}")

    def fetch_historical_data_async(self, ticker_symbol):
        """Fetch historical data for a ticker asynchronously."""
        threading.Thread(target=self.fetch_historical_data_for_ticker, args=(ticker_symbol,)).start()



# File: components/data_management_module/real_time_data.py
# Type: py

# components/data_management_module/real_time_data.py

import zmq
import json
import threading
import logging
from datetime import datetime, timedelta
import asyncio
from alpaca_trade_api.stream import Stream
from alpaca_trade_api.common import URL
from .config import config
from .data_access_layer import db_manager, HistoricalData
import pytz

class RealTimeDataStreamer:
    """Handles real-time market data streaming using ZeroMQ for internal distribution"""
    
    def __init__(self, tickers):
        self.logger = self._setup_logging()
        self.tickers = tickers
        
        # Initialize ZeroMQ context and sockets
        self.zmq_context = zmq.Context()
        self.publisher = self.zmq_context.socket(zmq.PUB)
        self.publisher.bind(f"tcp://*:{config.get('DEFAULT', 'zeromq_port')}")
        
        # Initialize Alpaca stream
        self.stream = Stream(
            config.get('api', 'key_id'),
            config.get('api', 'secret_key'),
            base_url=URL(config.get('api', 'base_url')),
            data_feed='sip'
        )
        
        self._running = False
        self._last_prices = {}
        self._last_update = {}
        self._interval = timedelta(minutes=5)

    def _setup_logging(self):
        """Set up logging for the real-time data streamer"""
        logger = logging.getLogger('realtime_data')
        logger.setLevel(logging.INFO)
        handler = logging.FileHandler(config.get('DEFAULT', 'log_file'))
        handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
        logger.addHandler(handler)
        return logger

    async def _is_market_hours(self):
        """Check if current time is within market hours"""
        ny_time = datetime.now(pytz.timezone('America/New_York'))
        market_open = ny_time.replace(hour=9, minute=30, second=0, microsecond=0)
        market_close = ny_time.replace(hour=16, minute=0, second=0, microsecond=0)
        return market_open <= ny_time <= market_close

    async def handle_bar(self, bar):
        """Handle incoming bar data"""
        try:
            if not await self._is_market_hours():
                return

            current_time = datetime.now(pytz.UTC)
            last_update = self._last_update.get(bar.symbol)
            
            # Only process if 5 minutes have passed since last update
            if (last_update is None or 
                current_time - last_update >= self._interval):
                
                # Validate the data
                HistoricalData.validate_price_data(
                    bar.open, bar.high, bar.low, bar.close, bar.volume
                )
                
                # Store and publish
                await self._store_bar_data(bar)
                await self._publish_bar_data(bar)
                
                self._last_update[bar.symbol] = current_time
                self._last_prices[bar.symbol] = bar.close
                
        except Exception as e:
            self.logger.error(f"Error processing bar data: {str(e)}")

    def _store_bar_data(self, bar):
        """Store bar data in the database"""
        try:
            record = HistoricalData(
                ticker_symbol=bar.symbol,
                timestamp=bar.timestamp,
                open=bar.open,
                high=bar.high,
                low=bar.low,
                close=bar.close,
                volume=bar.volume
            )
            
            session = db_manager.Session()
            try:
                session.add(record)
                session.commit()
                self.logger.debug(f"Stored bar data for {bar.symbol}")
            finally:
                session.close()
                
        except Exception as e:
            self.logger.error(f"Failed to store bar data: {str(e)}")

    def _publish_bar_data(self, bar):
        """Publish bar data through ZeroMQ"""
        try:
            message = {
                'symbol': bar.symbol,
                'timestamp': bar.timestamp.isoformat(),
                'open': bar.open,
                'high': bar.high,
                'low': bar.low,
                'close': bar.close,
                'volume': bar.volume
            }
            
            topic = f"{config.get('DEFAULT', 'zeromq_topic')}.{bar.symbol}"
            self.publisher.send_string(f"{topic} {json.dumps(message)}")
            
        except Exception as e:
            self.logger.error(f"Failed to publish bar data: {str(e)}")

    def start(self):
        """Start the real-time data streaming"""
        if self._running:
            self.logger.warning("Streamer is already running")
            return

        self._running = True
        self.logger.info("Starting real-time data streaming")
        
        # Subscribe to bars for all tickers
        for ticker in self.tickers:
            self.stream.subscribe_bars(self.handle_bar, ticker)
            self.logger.info(f"Subscribed to bars for {ticker}")

        # Start the stream in a separate thread
        try:
            self.stream_thread = threading.Thread(target=self._run_stream, daemon=True)
            self.stream_thread.start()
        except Exception as e:
            self._running = False
            self.logger.error(f"Stream error: {str(e)}")
            raise

    def _run_stream(self):
        """Run the stream in the event loop"""
        try:
            self.stream.run()
        except Exception as e:
            self._running = False
            self.logger.error(f"Stream encountered an error: {str(e)}")

    def stop(self):
        """Stop the real-time data streaming"""
        if not self._running:
            return

        self._running = False
        try:
            self.stream.stop()
            if hasattr(self, 'stream_thread') and self.stream_thread.is_alive():
                self.stream_thread.join(timeout=5)
            self.publisher.close()
            self.zmq_context.term()
            self.logger.info("Stopped real-time data streaming")
        except Exception as e:
            self.logger.error(f"Error stopping stream: {str(e)}")


# File: components/data_management_module/run_data_manager.py
# Type: py

import logging
from components.data_management_module.data_manager import DataManager
import time
import signal
import sys

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/data_manager.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

def signal_handler(signum, frame):
    logger.info("Received shutdown signal. Stopping application...")
    if data_manager:
        data_manager.stop_real_time_streaming()
    sys.exit(0)

# Register signal handlers
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

if __name__ == "__main__":
    data_manager = None
    try:
        logger.info("Initializing DataManager...")
        data_manager = DataManager()
        
        # Start real-time streaming
        logger.info("Starting real-time data streaming...")
        data_manager.start_real_time_streaming()
        
        # Keep the script running and perform maintenance
        while True:
            try:
                # Perform maintenance every 24 hours
                data_manager.perform_maintenance()
                
                # Verify data is being collected
                for ticker in data_manager.tickers:
                    latest_data = data_manager.get_historical_data(
                        ticker,
                        start_date=datetime.now() - timedelta(hours=1),
                        end_date=datetime.now()
                    )
                    if latest_data:
                        logger.info(f"Latest data for {ticker}: {len(latest_data)} records")
                
                time.sleep(300)  # Check every 5 minutes
                
            except Exception as e:
                logger.error(f"Error in main loop: {str(e)}")
                time.sleep(60)  # Wait a minute before retrying
                
    except Exception as e:
        logger.error(f"Fatal error in main: {str(e)}")
        raise
    finally:
        if data_manager:
            data_manager.stop_real_time_streaming()

# File: components/data_management_module/utils.py
# Type: py

# components/data_management_module/utils.py

def append_ticker_to_csv(ticker_symbol, tickers_file_path):
    """Append a new ticker to the tickers.csv file if it doesn't already exist."""
    try:
        with open(tickers_file_path, 'r+') as f:
            tickers = [line.strip() for line in f.readlines()]
            if ticker_symbol in tickers:
                print(f"Ticker {ticker_symbol} already exists in {tickers_file_path}")
                return False  # Indicate that the ticker was not added
            f.write(f"{ticker_symbol}\n")
            print(f"Ticker {ticker_symbol} added to {tickers_file_path}")
            return True  # Indicate that the ticker was successfully added
    except Exception as e:
        print(f"Error appending ticker to CSV: {str(e)}")
        return False
    
def reload_tickers(self):
        """Reload tickers from the tickers file dynamically."""
        with self.lock:
            self.load_tickers()
            print("Tickers reloaded.")



# File: components/data_management_module/verify_data.py
# Type: py

import sqlite3
import pandas as pd
from datetime import datetime, timedelta
import pytz

def verify_data():
    # Connect to the database
    conn = sqlite3.connect('data/data.db')
    
    # Check tables
    print("\nTables in database:")
    tables = pd.read_sql_query("SELECT name FROM sqlite_master WHERE type='table';", conn)
    print(tables)
    
    # Check tickers
    print("\nTickers in database:")
    tickers = pd.read_sql_query("SELECT * FROM tickers;", conn)
    print(tickers)
    
    # For each ticker, check the latest data
    for ticker in tickers['symbol']:
        print(f"\nLatest data for {ticker}:")
        query = f"""
        SELECT * FROM historical_data 
        WHERE ticker_symbol = '{ticker}' 
        ORDER BY timestamp DESC 
        LIMIT 5;
        """
        latest_data = pd.read_sql_query(query, conn)
        print(latest_data)
        
        # Check data frequency
        print(f"\nData frequency check for {ticker} (last 24 hours):")
        query = f"""
        SELECT COUNT(*) as count, 
               strftime('%Y-%m-%d %H', timestamp) as hour
        FROM historical_data 
        WHERE ticker_symbol = '{ticker}'
        AND timestamp > datetime('now', '-1 day')
        GROUP BY hour
        ORDER BY hour DESC;
        """
        frequency = pd.read_sql_query(query, conn)
        print(frequency)
    
    conn.close()

if __name__ == "__main__":
    verify_data()

